[{"configDocKey":{"type":"boolean","key":"quarkus.zookeeper.client.auth.sasl.enabled","configDoc":"Set the value to true to enable SASL authentication.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enabled","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.auth.clientconfig","configDoc":"Specifies the context key in the JAAS login file.","withinAMap":false,"defaultValue":"Client","javaDocSiteLink":"","docMapKey":"clientconfig","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.auth.sasl.config-string","configDoc":"SALS client configuration string, e.g. org.apache.zookeeper.server.auth.DigestLoginModule required username=\"test\" password=\"passwd\";","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"config-string","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.auth.server-principal","configDoc":"Specifies the server principal to be used by the client for authentication, while connecting to the zookeeper server, when Kerberos authentication is enabled. If this configuration is provided, then the ZooKeeper client will NOT USE any of the following parameters to determine the server principal: zookeeper.sasl.client.username, zookeeper.sasl.client.canonicalize.hostname, zookeeper.server.realm.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"server-principal","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.auth.client-username","configDoc":"Traditionally, a principal is divided into three parts: the primary, the instance, and the realm. The format of a typical Kerberos V5 principal is primary/instance@REALM. zookeeper.sasl.client.username specifies the primary part of the server principal.","withinAMap":false,"defaultValue":"zookeeper","javaDocSiteLink":"","docMapKey":"client-username","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.zookeeper.client.auth.client-canonicalize-hostname","configDoc":"Expecting the zookeeper.server.principal parameter is not provided, the ZooKeeper client will try to determine the 'instance' (host) part of the ZooKeeper server principal. First it takes the hostname provided as the ZooKeeper server connection string. Then it tries to 'canonicalize' the address by getting the fully qualified domain name belonging to the address. You can disable this 'canonicalization' by setting: zookeeper.sasl.client.canonicalize.hostname=false.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"client-canonicalize-hostname","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.auth.server-realm","configDoc":"Realm part of the server principal. By default it is the client principal realm.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"server-realm","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.ssl.key-store-location","configDoc":"Specifies the file path to a JKS containing the local credentials to be used for SSL connections.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-location","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.ssl.key-store-password","configDoc":"Specifies the password to unlock the file.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.ssl.trust-store-location","configDoc":"Specifies the file path to a JKS containing the remote credentials to be used for SSL connections.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-location","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.ssl.trust-store-password","configDoc":"Specifies the password to unlock the file.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.ssl.key-store-type","configDoc":"Specifies the file format of keys store files used to establish TLS connection to the ZooKeeper server. Values: JKS, PEM, PKCS12 or null.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-type","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.ssl.trust-store-type","configDoc":"Specifies the file format of trust store files used to establish TLS connection to the ZooKeeper server. Values: JKS, PEM, PKCS12 or null.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-type","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"int","key":"quarkus.zookeeper.client.connection-timeout-millis","configDoc":"Connection timeout in millis.","withinAMap":false,"defaultValue":"30000","javaDocSiteLink":"","docMapKey":"connection-timeout-millis","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"int","key":"quarkus.zookeeper.client.request-timeout-millis","configDoc":"Request timeout in millis.","withinAMap":false,"defaultValue":"5000","javaDocSiteLink":"","docMapKey":"request-timeout-millis","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.zookeeper.client.disable-autowatch-reset","configDoc":"This switch controls whether automatic watch resetting is enabled. Clients automatically reset watches during session reconnect by default, this option allows the client to turn off this behavior by setting zookeeper.disableAutoWatchReset to true.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"disable-autowatch-reset","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.zookeeper.client.secure","configDoc":"If you want to connect to the server secure client port, you need to set this property to true on the client. This will connect to server using SSL with specified credentials. Note that it requires the Netty client.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"secure","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.client.client-cnxn-socket","configDoc":"Specifies which ClientCnxnSocket to be used. Possible values are org.apache.zookeeper.ClientCnxnSocketNIO and org.apache.zookeeper.ClientCnxnSocketNetty . Default is org.apache.zookeeper.ClientCnxnSocketNIO . If you want to connect to server's secure client port, you need to set this property to org.apache.zookeeper.ClientCnxnSocketNetty on client.","withinAMap":false,"defaultValue":"org.apache.zookeeper.ClientCnxnSocketNIO","javaDocSiteLink":"","docMapKey":"client-cnxn-socket","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"int","key":"quarkus.zookeeper.client.jute-max-buffer","configDoc":"In the client side, it specifies the maximum size of the incoming data from the server. The default is 0xfffff(1048575) bytes, or just under 1M. This is really a sanity check. The ZooKeeper server is designed to store and send data on the order of kilobytes. If incoming data length is more than this value, an IOException is raised. This value of client side should keep same with the server side(Setting System.setProperty(\"jute.maxbuffer\", \"xxxx\") in the client side will work), otherwise problems will arise.","withinAMap":false,"defaultValue":"1048575","javaDocSiteLink":"","docMapKey":"jute-max-buffer","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.zookeeper.session.connection-string","configDoc":"Comma separated host:port pairs, each corresponding to a zk server.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"connection-string","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"int","key":"quarkus.zookeeper.session.timeout","configDoc":"Session timeout in milliseconds.","withinAMap":false,"defaultValue":"30000","javaDocSiteLink":"","docMapKey":"timeout","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.zookeeper.session.can-be-read-only","configDoc":"Whether the created client is allowed to go to read-only mode in case of partitioning. Read-only mode basically means that if the client can't find any majority servers but there's partitioned server it could reach, it connects to one in read-only mode.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"can-be-read-only","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.zookeeper","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.zookeeper.health.enabled","configDoc":"Whether to enable health checks.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"health-enabled","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.zookeeper","enum":false}}]